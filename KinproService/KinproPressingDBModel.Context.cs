//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KinproService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class KinproPressingEntities : DbContext
    {
        public KinproPressingEntities()
            : base("name=KinproPressingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Client> Clients { get; set; }
        public DbSet<ClientOrder> ClientOrders { get; set; }
        public DbSet<Cloth> Clothes { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
    
        public virtual int AddClient(string name, string firstName, Nullable<int> phone)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClient", nameParameter, firstNameParameter, phoneParameter);
        }
    
        public virtual int AddCloth(string name, Nullable<int> price, string clothDescription)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var clothDescriptionParameter = clothDescription != null ?
                new ObjectParameter("ClothDescription", clothDescription) :
                new ObjectParameter("ClothDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCloth", nameParameter, priceParameter, clothDescriptionParameter);
        }
    
        public virtual int AddEmployee(string name, Nullable<int> phone)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", nameParameter, phoneParameter);
        }
    
        public virtual int AddNewItems(Nullable<int> itemId, Nullable<int> orderNumber, Nullable<int> ray, string color, Nullable<int> itemStatus, Nullable<int> clientId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var rayParameter = ray.HasValue ?
                new ObjectParameter("Ray", ray) :
                new ObjectParameter("Ray", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewItems", itemIdParameter, orderNumberParameter, rayParameter, colorParameter, itemStatusParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AddNewOrder(Nullable<int> clientId, Nullable<int> total, Nullable<int> orderStatus, Nullable<int> orderNumber, Nullable<int> employeeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddNewOrder", clientIdParameter, totalParameter, orderStatusParameter, orderNumberParameter, employeeIdParameter);
        }
    
        public virtual int DeleteClient(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClient", clientIdParameter);
        }
    
        public virtual int DeleteCloth(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCloth", idParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", idParameter);
        }
    
        public virtual int DeleteOrder(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrder", idParameter);
        }
    
        public virtual int DeleteOrderItem(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrderItem", itemIdParameter);
        }
    
        public virtual ObjectResult<GetAllClientOrders_Result> GetAllClientOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClientOrders_Result>("GetAllClientOrders");
        }
    
        public virtual ObjectResult<GetAllClients_Result> GetAllClients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClients_Result>("GetAllClients");
        }
    
        public virtual ObjectResult<GetAllClothsSetting_Result> GetAllClothsSetting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClothsSetting_Result>("GetAllClothsSetting");
        }
    
        public virtual ObjectResult<GetAllEmployeesSetting_Result> GetAllEmployeesSetting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployeesSetting_Result>("GetAllEmployeesSetting");
        }
    
        public virtual ObjectResult<GetClientByName_Result> GetClientByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientByName_Result>("GetClientByName", nameParameter);
        }
    
        public virtual ObjectResult<GetClientByPhoneNumber_Result> GetClientByPhoneNumber(Nullable<int> phoneNumber)
        {
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientByPhoneNumber_Result>("GetClientByPhoneNumber", phoneNumberParameter);
        }
    
        public virtual ObjectResult<GetClientItermsOrder_Result> GetClientItermsOrder(Nullable<int> orderNumber)
        {
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientItermsOrder_Result>("GetClientItermsOrder", orderNumberParameter);
        }
    
        public virtual ObjectResult<GetClientOrderByOrderNumber_Result> GetClientOrderByOrderNumber(Nullable<int> orderNumber)
        {
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientOrderByOrderNumber_Result>("GetClientOrderByOrderNumber", orderNumberParameter);
        }
    
        public virtual ObjectResult<GetClientOrderItemsByRay_Result> GetClientOrderItemsByRay(Nullable<int> ray, Nullable<int> orderNumber)
        {
            var rayParameter = ray.HasValue ?
                new ObjectParameter("Ray", ray) :
                new ObjectParameter("Ray", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientOrderItemsByRay_Result>("GetClientOrderItemsByRay", rayParameter, orderNumberParameter);
        }
    
        public virtual ObjectResult<GetClientOrdersByPhoneNumber_Result> GetClientOrdersByPhoneNumber(Nullable<int> phoneNumber)
        {
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientOrdersByPhoneNumber_Result>("GetClientOrdersByPhoneNumber", phoneNumberParameter);
        }
    
        public virtual ObjectResult<ReportEntry_Result> ReportEntry(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportEntry_Result>("ReportEntry", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ReportExit_Result> ReportExit(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportExit_Result>("ReportExit", fromDateParameter, toDateParameter);
        }
    
        public virtual int UpdateClient(string name, string firstName, Nullable<int> employeeId, Nullable<int> phone, string clientAddress, Nullable<int> clientId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(int));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("ClientAddress", clientAddress) :
                new ObjectParameter("ClientAddress", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClient", nameParameter, firstNameParameter, employeeIdParameter, phoneParameter, clientAddressParameter, clientIdParameter);
        }
    
        public virtual int UpdateClientOrder(Nullable<int> orderStatus, Nullable<int> orderNumber, Nullable<int> employeeId, Nullable<int> total)
        {
            var orderStatusParameter = orderStatus.HasValue ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientOrder", orderStatusParameter, orderNumberParameter, employeeIdParameter, totalParameter);
        }
    
        public virtual int UpdateClientOrderItems(Nullable<int> itemId, Nullable<int> ray, string color, Nullable<int> itemStatus, Nullable<int> employeeId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var rayParameter = ray.HasValue ?
                new ObjectParameter("Ray", ray) :
                new ObjectParameter("Ray", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientOrderItems", itemIdParameter, rayParameter, colorParameter, itemStatusParameter, employeeIdParameter);
        }
    
        public virtual int UpdateCloth(string name, Nullable<int> itemId, Nullable<int> price, string clothDescription, Nullable<int> clientId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var clothDescriptionParameter = clothDescription != null ?
                new ObjectParameter("ClothDescription", clothDescription) :
                new ObjectParameter("ClothDescription", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCloth", nameParameter, itemIdParameter, priceParameter, clothDescriptionParameter, clientIdParameter);
        }
    
        public virtual int UpdateEmployee(string name, Nullable<int> id, Nullable<int> phone)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", nameParameter, idParameter, phoneParameter);
        }
    }
}
